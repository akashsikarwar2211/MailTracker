"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useEmailData.ts":
/*!*******************************!*\
  !*** ./hooks/useEmailData.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useEmailData: function() { return /* binding */ useEmailData; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst API_BASE_URL = \"http://localhost:3001/api\" || 0;\nconsole.log(\"API_BASE_URL:\", API_BASE_URL);\nfunction useEmailData() {\n    const [latestEmail, setLatestEmail] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [emailHistory, setEmailHistory] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [stats, setStats] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const fetchLatestEmail = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async function() {\n        let forceRefresh = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        try {\n            // Add cache-busting parameter for force refresh\n            const url = forceRefresh ? \"\".concat(API_BASE_URL, \"/emails/latest?t=\").concat(Date.now()) : \"\".concat(API_BASE_URL, \"/emails/latest\");\n            console.log(\"=== fetchLatestEmail called ===\");\n            console.log(\"forceRefresh:\", forceRefresh);\n            console.log(\"Fetching latest email from:\", url);\n            const response = await fetch(url);\n            console.log(\"Latest email response status:\", response.status);\n            if (!response.ok) {\n                if (response.status === 404) {\n                    console.log(\"No emails found (404)\");\n                    setLatestEmail(null);\n                    return;\n                }\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            console.log(\"Latest email data:\", data);\n            if (data.success) {\n                var _data_data;\n                console.log(\"Setting latest email to:\", (_data_data = data.data) === null || _data_data === void 0 ? void 0 : _data_data.id);\n                setLatestEmail(data.data);\n                console.log(\"Latest email set successfully\");\n            } else {\n                console.log(\"API response not successful:\", data);\n            }\n        } catch (err) {\n            console.error(\"Error fetching latest email:\", err);\n            setError(err instanceof Error ? err.message : \"Failed to fetch latest email\");\n        }\n    }, []);\n    const fetchEmailHistory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/emails/history?page=1&limit=25\"));\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            if (data.success) {\n                setEmailHistory(data.data);\n            }\n        } catch (err) {\n            console.error(\"Error fetching email history:\", err);\n            setError(err instanceof Error ? err.message : \"Failed to fetch email history\");\n        }\n    }, []);\n    const fetchStats = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/emails/stats/dashboard\"));\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            if (data.success) {\n                setStats(data.data);\n            }\n        } catch (err) {\n            console.error(\"Error fetching stats:\", err);\n            setError(err instanceof Error ? err.message : \"Failed to fetch statistics\");\n        }\n    }, []);\n    const fetchAllData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async function() {\n        let forceRefresh = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        console.log(\"=== fetchAllData called ===\");\n        console.log(\"forceRefresh:\", forceRefresh);\n        setIsLoading(true);\n        setError(null);\n        try {\n            console.log(\"Starting to fetch data...\");\n            console.log(\"Calling fetchLatestEmail with forceRefresh:\", forceRefresh);\n            await Promise.all([\n                fetchLatestEmail(forceRefresh),\n                fetchEmailHistory(),\n                fetchStats()\n            ]);\n            console.log(\"All data fetched successfully\");\n        } catch (err) {\n            console.error(\"Error fetching data:\", err);\n        } finally{\n            setIsLoading(false);\n            console.log(\"fetchAllData completed, loading set to false\");\n        }\n    }, [\n        fetchLatestEmail,\n        fetchEmailHistory,\n        fetchStats\n    ]);\n    const refetch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        console.log(\"Refetch called - fetching all data\");\n        try {\n            await fetchAllData(true) // Force refresh\n            ;\n            console.log(\"Refetch completed successfully\");\n        } catch (error) {\n            console.error(\"Refetch failed:\", error);\n            throw error;\n        }\n    }, [\n        fetchAllData\n    ]);\n    const refetchHistory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        await fetchEmailHistory() // Refresh only history\n        ;\n    }, [\n        fetchEmailHistory\n    ]);\n    // Initial data fetch\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchAllData();\n    }, [\n        fetchAllData\n    ]);\n    // Set up polling for latest email (every 30 seconds)\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const interval = setInterval(()=>{\n            fetchLatestEmail();\n        }, 30000);\n        return ()=>clearInterval(interval);\n    }, [\n        fetchLatestEmail\n    ]);\n    return {\n        latestEmail,\n        emailHistory,\n        stats,\n        isLoading,\n        error,\n        refetch,\n        refetchHistory\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useEmailData.ts\n"));

/***/ })

});